// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `BicaIceComms.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package bicacomms;

public final class SchedInterfacePrxHelper extends Ice.ObjectPrxHelperBase implements SchedInterfacePrx
{
    private static final String __addSched_name = "addSched";

    public int addSched(String id)
    {
        return addSched(id, null, false);
    }

    public int addSched(String id, java.util.Map<String, String> __ctx)
    {
        return addSched(id, __ctx, true);
    }

    private int addSched(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addSched", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addSched");
                    __delBase = __getDelegate(false);
                    _SchedInterfaceDel __del = (_SchedInterfaceDel)__delBase;
                    return __del.addSched(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addSched(String id)
    {
        return begin_addSched(id, null, false, null);
    }

    public Ice.AsyncResult begin_addSched(String id, java.util.Map<String, String> __ctx)
    {
        return begin_addSched(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addSched(String id, Ice.Callback __cb)
    {
        return begin_addSched(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSched(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSched(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addSched(String id, Callback_SchedInterface_addSched __cb)
    {
        return begin_addSched(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSched(String id, java.util.Map<String, String> __ctx, Callback_SchedInterface_addSched __cb)
    {
        return begin_addSched(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addSched(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addSched_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addSched_name, __cb);
        try
        {
            __result.__prepare(__addSched_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_addSched(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addSched_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __removeAll_name = "removeAll";

    public void removeAll()
    {
        removeAll(null, false);
    }

    public void removeAll(java.util.Map<String, String> __ctx)
    {
        removeAll(__ctx, true);
    }

    private void removeAll(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeAll", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SchedInterfaceDel __del = (_SchedInterfaceDel)__delBase;
                    __del.removeAll(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeAll()
    {
        return begin_removeAll(null, false, null);
    }

    public Ice.AsyncResult begin_removeAll(java.util.Map<String, String> __ctx)
    {
        return begin_removeAll(__ctx, true, null);
    }

    public Ice.AsyncResult begin_removeAll(Ice.Callback __cb)
    {
        return begin_removeAll(null, false, __cb);
    }

    public Ice.AsyncResult begin_removeAll(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeAll(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeAll(Callback_SchedInterface_removeAll __cb)
    {
        return begin_removeAll(null, false, __cb);
    }

    public Ice.AsyncResult begin_removeAll(java.util.Map<String, String> __ctx, Callback_SchedInterface_removeAll __cb)
    {
        return begin_removeAll(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeAll(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeAll_name, __cb);
        try
        {
            __result.__prepare(__removeAll_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeAll(Ice.AsyncResult __result)
    {
        __end(__result, __removeAll_name);
    }

    private static final String __removeSched_name = "removeSched";

    public int removeSched(String id)
    {
        return removeSched(id, null, false);
    }

    public int removeSched(String id, java.util.Map<String, String> __ctx)
    {
        return removeSched(id, __ctx, true);
    }

    private int removeSched(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeSched", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("removeSched");
                    __delBase = __getDelegate(false);
                    _SchedInterfaceDel __del = (_SchedInterfaceDel)__delBase;
                    return __del.removeSched(id, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeSched(String id)
    {
        return begin_removeSched(id, null, false, null);
    }

    public Ice.AsyncResult begin_removeSched(String id, java.util.Map<String, String> __ctx)
    {
        return begin_removeSched(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeSched(String id, Ice.Callback __cb)
    {
        return begin_removeSched(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeSched(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeSched(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeSched(String id, Callback_SchedInterface_removeSched __cb)
    {
        return begin_removeSched(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeSched(String id, java.util.Map<String, String> __ctx, Callback_SchedInterface_removeSched __cb)
    {
        return begin_removeSched(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeSched(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeSched_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeSched_name, __cb);
        try
        {
            __result.__prepare(__removeSched_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_removeSched(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __removeSched_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static SchedInterfacePrx checkedCast(Ice.ObjectPrx __obj)
    {
        SchedInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SchedInterfacePrx)
            {
                __d = (SchedInterfacePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    SchedInterfacePrxHelper __h = new SchedInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SchedInterfacePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        SchedInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SchedInterfacePrx)
            {
                __d = (SchedInterfacePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    SchedInterfacePrxHelper __h = new SchedInterfacePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SchedInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SchedInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    SchedInterfacePrxHelper __h = new SchedInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SchedInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        SchedInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    SchedInterfacePrxHelper __h = new SchedInterfacePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SchedInterfacePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        SchedInterfacePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SchedInterfacePrx)
            {
                __d = (SchedInterfacePrx)__obj;
            }
            else
            {
                SchedInterfacePrxHelper __h = new SchedInterfacePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SchedInterfacePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SchedInterfacePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SchedInterfacePrxHelper __h = new SchedInterfacePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::bicacomms::SchedInterface"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _SchedInterfaceDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _SchedInterfaceDelD();
    }

    public static void __write(IceInternal.BasicStream __os, SchedInterfacePrx v)
    {
        __os.writeProxy(v);
    }

    public static SchedInterfacePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SchedInterfacePrxHelper result = new SchedInterfacePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
