// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `BicaIceComms.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_paco_catkin_ws_src_watermellon_include_wm_bica__home_paco_catkin_ws_src_watermellon_src_wm_bica_BicaIceComms_h__
#define ___home_paco_catkin_ws_src_watermellon_include_wm_bica__home_paco_catkin_ws_src_watermellon_src_wm_bica_BicaIceComms_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace bicacomms
{

class SchedInterface;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::bicacomms::SchedInterface>&);
::IceProxy::Ice::Object* upCast(::IceProxy::bicacomms::SchedInterface*);

class VicodeDebug;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::bicacomms::VicodeDebug>&);
::IceProxy::Ice::Object* upCast(::IceProxy::bicacomms::VicodeDebug*);

}

}

namespace bicacomms
{

class SchedInterface;
bool operator==(const SchedInterface&, const SchedInterface&);
bool operator<(const SchedInterface&, const SchedInterface&);
::Ice::Object* upCast(::bicacomms::SchedInterface*);
typedef ::IceInternal::Handle< ::bicacomms::SchedInterface> SchedInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::bicacomms::SchedInterface> SchedInterfacePrx;
void __patch(SchedInterfacePtr&, const ::Ice::ObjectPtr&);

class VicodeDebug;
bool operator==(const VicodeDebug&, const VicodeDebug&);
bool operator<(const VicodeDebug&, const VicodeDebug&);
::Ice::Object* upCast(::bicacomms::VicodeDebug*);
typedef ::IceInternal::Handle< ::bicacomms::VicodeDebug> VicodeDebugPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::bicacomms::VicodeDebug> VicodeDebugPrx;
void __patch(VicodeDebugPtr&, const ::Ice::ObjectPtr&);

}

namespace bicacomms
{

typedef ::std::vector< ::std::string> ListString;

struct ComponentsList
{
    ::bicacomms::ListString ListComps;
    ::Ice::Int numCompos;
};

const ::Ice::Int SUCCESS = 0;

const ::Ice::Int NOTRUNNING = 1;

const ::Ice::Int NOTFOUND = 2;

}

namespace Ice
{
template<>
struct StreamableTraits< ::bicacomms::ComponentsList>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::bicacomms::ComponentsList, S>
{
    static void write(S* __os, const ::bicacomms::ComponentsList& v)
    {
        __os->write(v.ListComps);
        __os->write(v.numCompos);
    }
};

template<class S>
struct StreamReader< ::bicacomms::ComponentsList, S>
{
    static void read(S* __is, ::bicacomms::ComponentsList& v)
    {
        __is->read(v.ListComps);
        __is->read(v.numCompos);
    }
};

}

namespace bicacomms
{

class Callback_SchedInterface_addSched_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedInterface_addSched_Base> Callback_SchedInterface_addSchedPtr;

class Callback_SchedInterface_removeSched_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedInterface_removeSched_Base> Callback_SchedInterface_removeSchedPtr;

class Callback_SchedInterface_removeAll_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SchedInterface_removeAll_Base> Callback_SchedInterface_removeAllPtr;

class Callback_VicodeDebug_getState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VicodeDebug_getState_Base> Callback_VicodeDebug_getStatePtr;

class Callback_VicodeDebug_getListComponents_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VicodeDebug_getListComponents_Base> Callback_VicodeDebug_getListComponentsPtr;

}

namespace IceProxy
{

namespace bicacomms
{

class SchedInterface : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int addSched(const ::std::string& id)
    {
        return addSched(id, 0);
    }
    ::Ice::Int addSched(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return addSched(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addSched(const ::std::string& id, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addSched(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addSched(const ::std::string& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addSched(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addSched(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_addSched(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_addSched(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addSched(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_addSched(const ::std::string& id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::bicacomms::SchedInterfacePrx __proxy = ::bicacomms::SchedInterfacePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_addSched(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_addSched(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_addSched(const ::std::string& id)
    {
        return begin_addSched(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addSched(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_addSched(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addSched(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSched(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addSched(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSched(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addSched(const ::std::string& id, const ::bicacomms::Callback_SchedInterface_addSchedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSched(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addSched(const ::std::string& id, const ::Ice::Context& __ctx, const ::bicacomms::Callback_SchedInterface_addSchedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addSched(id, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_addSched(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int addSched(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addSched(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int removeSched(const ::std::string& id)
    {
        return removeSched(id, 0);
    }
    ::Ice::Int removeSched(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return removeSched(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeSched(const ::std::string& id, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeSched(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeSched(const ::std::string& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeSched(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeSched(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_removeSched(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_removeSched(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeSched(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_removeSched(const ::std::string& id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::bicacomms::SchedInterfacePrx __proxy = ::bicacomms::SchedInterfacePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_removeSched(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_removeSched(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_removeSched(const ::std::string& id)
    {
        return begin_removeSched(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeSched(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_removeSched(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeSched(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSched(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeSched(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSched(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeSched(const ::std::string& id, const ::bicacomms::Callback_SchedInterface_removeSchedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSched(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeSched(const ::std::string& id, const ::Ice::Context& __ctx, const ::bicacomms::Callback_SchedInterface_removeSchedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeSched(id, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_removeSched(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int removeSched(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeSched(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeAll()
    {
        removeAll(0);
    }
    void removeAll(const ::Ice::Context& __ctx)
    {
        removeAll(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeAll(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAll(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeAll(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAll(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeAll(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeAll(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeAll()
    {
        return begin_removeAll(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAll(const ::Ice::Context& __ctx)
    {
        return begin_removeAll(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeAll(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAll(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAll(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAll(const ::bicacomms::Callback_SchedInterface_removeAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeAll(const ::Ice::Context& __ctx, const ::bicacomms::Callback_SchedInterface_removeAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeAll(&__ctx, __del, __cookie);
    }

    void end_removeAll(const ::Ice::AsyncResultPtr&);
    
private:

    void removeAll(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeAll(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_secure(bool __secure) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_twoway() const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_oneway() const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_batchOneway() const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_datagram() const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_batchDatagram() const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_compress(bool __compress) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SchedInterface> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SchedInterface*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class VicodeDebug : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int getState(const ::std::string& id)
    {
        return getState(id, 0);
    }
    ::Ice::Int getState(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return getState(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getState(const ::std::string& id, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getState(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::std::string& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getState(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getState(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getState(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getState(const ::std::string& id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::bicacomms::VicodeDebugPrx __proxy = ::bicacomms::VicodeDebugPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getState(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getState(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getState(const ::std::string& id)
    {
        return begin_getState(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_getState(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::std::string& id, const ::bicacomms::Callback_VicodeDebug_getStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::std::string& id, const ::Ice::Context& __ctx, const ::bicacomms::Callback_VicodeDebug_getStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(id, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_getState(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getState(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getState(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::bicacomms::ComponentsList getListComponents()
    {
        return getListComponents(0);
    }
    ::bicacomms::ComponentsList getListComponents(const ::Ice::Context& __ctx)
    {
        return getListComponents(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getListComponents(const ::IceInternal::Function<void (const ::bicacomms::ComponentsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getListComponents(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getListComponents(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getListComponents(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getListComponents(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::bicacomms::ComponentsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getListComponents(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getListComponents(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getListComponents(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getListComponents(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::bicacomms::ComponentsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::bicacomms::ComponentsList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::bicacomms::VicodeDebugPrx __proxy = ::bicacomms::VicodeDebugPrx::uncheckedCast(__result->getProxy());
                ::bicacomms::ComponentsList __ret;
                try
                {
                    __ret = __proxy->end_getListComponents(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::bicacomms::ComponentsList&)> _response;
        };
        return begin_getListComponents(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getListComponents()
    {
        return begin_getListComponents(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getListComponents(const ::Ice::Context& __ctx)
    {
        return begin_getListComponents(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getListComponents(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getListComponents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getListComponents(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getListComponents(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getListComponents(const ::bicacomms::Callback_VicodeDebug_getListComponentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getListComponents(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getListComponents(const ::Ice::Context& __ctx, const ::bicacomms::Callback_VicodeDebug_getListComponentsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getListComponents(&__ctx, __del, __cookie);
    }

    ::bicacomms::ComponentsList end_getListComponents(const ::Ice::AsyncResultPtr&);
    
private:

    ::bicacomms::ComponentsList getListComponents(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getListComponents(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_secure(bool __secure) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_twoway() const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_oneway() const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_batchOneway() const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_datagram() const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_batchDatagram() const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_compress(bool __compress) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_timeout(int __timeout) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VicodeDebug> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<VicodeDebug*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace bicacomms
{

class SchedInterface : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int addSched(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int removeSched(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void removeAll(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class VicodeDebug : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int getState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::bicacomms::ComponentsList getListComponents(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace bicacomms
{

class SchedInterface : virtual public ::IceDelegate::bicacomms::SchedInterface,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int addSched(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int removeSched(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAll(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class VicodeDebug : virtual public ::IceDelegate::bicacomms::VicodeDebug,
                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int getState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::bicacomms::ComponentsList getListComponents(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace bicacomms
{

class SchedInterface : virtual public ::IceDelegate::bicacomms::SchedInterface,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int addSched(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int removeSched(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void removeAll(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class VicodeDebug : virtual public ::IceDelegate::bicacomms::VicodeDebug,
                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int getState(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::bicacomms::ComponentsList getListComponents(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace bicacomms
{

class SchedInterface : virtual public ::Ice::Object
{
public:

    typedef SchedInterfacePrx ProxyType;
    typedef SchedInterfacePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int addSched(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addSched(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int removeSched(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeSched(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeAll(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeAll(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const SchedInterface& l, const SchedInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SchedInterface& l, const SchedInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class VicodeDebug : virtual public ::Ice::Object
{
public:

    typedef VicodeDebugPrx ProxyType;
    typedef VicodeDebugPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int getState(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::bicacomms::ComponentsList getListComponents(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getListComponents(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const VicodeDebug& l, const VicodeDebug& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const VicodeDebug& l, const VicodeDebug& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace bicacomms
{

template<class T>
class CallbackNC_SchedInterface_addSched : public Callback_SchedInterface_addSched_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SchedInterface_addSched(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bicacomms::SchedInterfacePrx __proxy = ::bicacomms::SchedInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_addSched(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SchedInterface_addSchedPtr
newCallback_SchedInterface_addSched(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedInterface_addSched<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedInterface_addSchedPtr
newCallback_SchedInterface_addSched(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedInterface_addSched<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedInterface_addSched : public Callback_SchedInterface_addSched_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SchedInterface_addSched(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bicacomms::SchedInterfacePrx __proxy = ::bicacomms::SchedInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_addSched(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SchedInterface_addSchedPtr
newCallback_SchedInterface_addSched(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedInterface_addSched<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedInterface_addSchedPtr
newCallback_SchedInterface_addSched(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedInterface_addSched<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SchedInterface_removeSched : public Callback_SchedInterface_removeSched_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SchedInterface_removeSched(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bicacomms::SchedInterfacePrx __proxy = ::bicacomms::SchedInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_removeSched(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SchedInterface_removeSchedPtr
newCallback_SchedInterface_removeSched(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedInterface_removeSched<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedInterface_removeSchedPtr
newCallback_SchedInterface_removeSched(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedInterface_removeSched<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedInterface_removeSched : public Callback_SchedInterface_removeSched_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SchedInterface_removeSched(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bicacomms::SchedInterfacePrx __proxy = ::bicacomms::SchedInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_removeSched(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SchedInterface_removeSchedPtr
newCallback_SchedInterface_removeSched(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedInterface_removeSched<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedInterface_removeSchedPtr
newCallback_SchedInterface_removeSched(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedInterface_removeSched<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SchedInterface_removeAll : public Callback_SchedInterface_removeAll_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SchedInterface_removeAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SchedInterface_removeAllPtr
newCallback_SchedInterface_removeAll(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedInterface_removeAll<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedInterface_removeAllPtr
newCallback_SchedInterface_removeAll(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedInterface_removeAll<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SchedInterface_removeAllPtr
newCallback_SchedInterface_removeAll(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedInterface_removeAll<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SchedInterface_removeAllPtr
newCallback_SchedInterface_removeAll(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SchedInterface_removeAll<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SchedInterface_removeAll : public Callback_SchedInterface_removeAll_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SchedInterface_removeAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SchedInterface_removeAllPtr
newCallback_SchedInterface_removeAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedInterface_removeAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedInterface_removeAllPtr
newCallback_SchedInterface_removeAll(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedInterface_removeAll<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SchedInterface_removeAllPtr
newCallback_SchedInterface_removeAll(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedInterface_removeAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SchedInterface_removeAllPtr
newCallback_SchedInterface_removeAll(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SchedInterface_removeAll<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_VicodeDebug_getState : public Callback_VicodeDebug_getState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_VicodeDebug_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bicacomms::VicodeDebugPrx __proxy = ::bicacomms::VicodeDebugPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_VicodeDebug_getStatePtr
newCallback_VicodeDebug_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VicodeDebug_getState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VicodeDebug_getStatePtr
newCallback_VicodeDebug_getState(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VicodeDebug_getState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_VicodeDebug_getState : public Callback_VicodeDebug_getState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_VicodeDebug_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bicacomms::VicodeDebugPrx __proxy = ::bicacomms::VicodeDebugPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_VicodeDebug_getStatePtr
newCallback_VicodeDebug_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VicodeDebug_getState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VicodeDebug_getStatePtr
newCallback_VicodeDebug_getState(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VicodeDebug_getState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_VicodeDebug_getListComponents : public Callback_VicodeDebug_getListComponents_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::bicacomms::ComponentsList&);

    CallbackNC_VicodeDebug_getListComponents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bicacomms::VicodeDebugPrx __proxy = ::bicacomms::VicodeDebugPrx::uncheckedCast(__result->getProxy());
        ::bicacomms::ComponentsList __ret;
        try
        {
            __ret = __proxy->end_getListComponents(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_VicodeDebug_getListComponentsPtr
newCallback_VicodeDebug_getListComponents(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::bicacomms::ComponentsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VicodeDebug_getListComponents<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VicodeDebug_getListComponentsPtr
newCallback_VicodeDebug_getListComponents(T* instance, void (T::*cb)(const ::bicacomms::ComponentsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VicodeDebug_getListComponents<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_VicodeDebug_getListComponents : public Callback_VicodeDebug_getListComponents_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::bicacomms::ComponentsList&, const CT&);

    Callback_VicodeDebug_getListComponents(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::bicacomms::VicodeDebugPrx __proxy = ::bicacomms::VicodeDebugPrx::uncheckedCast(__result->getProxy());
        ::bicacomms::ComponentsList __ret;
        try
        {
            __ret = __proxy->end_getListComponents(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_VicodeDebug_getListComponentsPtr
newCallback_VicodeDebug_getListComponents(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::bicacomms::ComponentsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VicodeDebug_getListComponents<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VicodeDebug_getListComponentsPtr
newCallback_VicodeDebug_getListComponents(T* instance, void (T::*cb)(const ::bicacomms::ComponentsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VicodeDebug_getListComponents<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
